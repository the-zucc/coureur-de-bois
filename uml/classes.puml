@startuml General inheritance
skinparam class {
    BackgroundColor #ffffff
    ArrowColor #000000
    BorderColor #000000
}
skinparam stereotypeCBackgroundColor<<Singleton>> #FF7700




'entités de jeu
package entity #888888{
    
    interface AttachableEntity{
        onAttach(Entity):void
        onDetach(Entity):void
    }
    
    abstract class Entity{
        # id:String
        # position:Point3D
        # collisionBox:CollisionBox
        + Entity(Point3D):Entity
        + getId():String
        + getPosition():Point3D
        + {abstract} buildComponent():Component
        # fall():void
        # correctCollisions():void
    }
    
    package entity.item #337777{
        abstract class Item{
            owner:Human
        }
        Item <|-- Entity
        interface ThrowableEntity{
            getThrown():void
        }
        abstract class Weapon{
            # {static}name:String
            setOwner(Human):void
            attack():void
        }
        Weapon <|-- Wearable
        Weapon <|-- Item
        abstract class MeleeWeapon{
            swing():void
            attackCollidingEntities():void
        }
        MeleeWeapon <|--Weapon
        abstract class RangedWeapon{
            {abstract}shoot(double, double, double, double):void
        }
        RangedWeapon <|-- Weapon
        abstract class Consumable{
            getConsumed(LivingEntity consumingEntity)
        }
        Consumable <|-- Item
        abstract class Fruit{
            size:FruitSize
            Fruit():Fruit
        }
        Fruit <|-- Consumable
        class Apple{

        }
        Apple <|-- Fruit
        Apple <|-- Wearable
        class Berry{

        }
        Berry <|-- Fruit
        class Blueberry{

        }
        Blueberry <|-- Berry
        class Blackberry{

        }
        Blackberry <|-- Berry
        
        enum FruitSize{
            VERY_SMALL
            SMALL
            MEDIUM
            LARGE
            VERY_LARGE
            HUGE
            getRandomSize(boolean):FruitSize
            'boolean is: gaussian distributed probabilities?
            
        }
    }
    'entité générique
    
    abstract class LivingEntity{
        # hp:double
        # xpReward:double
        # move():void
        # update():void
        # dealdamage(double):void
        # die():void
        # jump():void
    }
    LivingEntity <|-- Entity
    
    'les humains du jeu
    abstract class Human{
        # inventory:ArrayList<Item>
    }
    Human *-- Item: "1..*"
    Human <|-- LivingEntity

    'le joueur incarne un humain
    class Player{
        + setUp(boolean):void
        + setDown(boolean):void
        + setLeft(boolean):void
        + setRight(boolean):void
        + attack(LivingEntity):void
    }
    Player <|-- Human
    
    abstract class Npc{
        
    }
    Npc <|-- Human

    'les autochtones dans le jeu
    class Aboriginal{
        + trade(Item):Item
        # group:HumanGroup
    }
    Aboriginal <|-- Npc

    abstract class Animal{
    }
    Animal <|-- LivingEntity
    'class Deer{
    '}
    'Deer <|-- Herbivore
    class Moose{

    }
    Moose <|-- Herbivore
    class Beaver{
        givePelt():Pelt
    }
    Beaver <|-- Herbivore
    class Carnivore{
        -prey:LivingEntity
        +getPrey():LivingEntity
    }
    Carnivore <|--Animal
    class Fox{

    }
    Fox <|-- Carnivore
    class Wolf{

    }
    Wolf <|-- Carnivore
    class Herbivore{

    }
    Herbivore <|-- Animal
    class Bear{

    }
    Bear <|-- Carnivore
    class Rabbit{

    }
    Rabbit <|-- Herbivore
    abstract class Plant{
        
    }
    Plant <|-- Entity
    Plant "1" *-- "n" Fruit
    abstract class Tree{

    }
    Tree <|-- Plant
    class Bouleau{

    }
    Bouleau <|-- Tree
    class Sapin{

    }
    Sapin <|-- Tree
    class AppleTree{
        # dropApple():void
        + getHit(double damage, MeeleeWeapon mw):void
        + 
    }
    AppleTree <|-- Tree
    class TallEatableGrass{

    }
    TallEatableGrass <|-- Plant
    class Bush{

    }
    Bush <|--Plant
    class BerryBush{

    }
    BerryBush <|-- Bush
    class BlackberryBush{

    }
    BlackberryBush <|-- BerryBush
    class BlueberryBush{

    }
    BlueberryBush <|-- BerryBush
    
    package entity.collision #888888{
        'grille de collisions
        class CollisionGrid<<Singleton>>{
            collisionBoxes:ArrayList<CollisionBox>
        }
        CollisionGrid "1" *-- "n"CollisionBox
        
        'boite de collision générique
        abstract class CollisionBox{

            {abstract}collidesSphericalBox():boolean
            '{abstract}collidesCubeBox():boolean
            {abstract}collidesCapsuleBox():boolean
            
            {abstract}getCorrectionSphericalBox():Point3D
            '{abstract}getCorrectionCubeBox():Point3D
            {abstract}getCorrectionCapsuleBox():Point3D

        }
        CollisionBox <-- Entity 

        'sphère
        class SphericalCollisionBox{

        }
        SphericalCollisionBox <|-- CollisionBox
        'capsule
        class CapsuleCollisionBox{

        }
        CollisionBox --|> CapsuleCollisionBox
        'CubeCollisionBox <|-- CollisionBox
    }
    package humangroup{
        class HumanGroup{
            members:ArrayList<Aboriginal>
            movingTo:Point3D
            
            HumanGroup(ArrayList<Aboriginal>):HumanGroup
            'for with members
            HumanGroup(ArrayList<Aboriginal>, double):HumanGroup
            'for with members and area radius
            getMembers():ArrayList<Aboriginal>
            getPosition():Point3D
            getMovingTo():Point3D
            getRadius():double
            startMovingTo(Point3D):void
            isMoving():boolean
            
        }
        'HumanGroup --> Point3D
    }
'CollisionBox --> Entity
}

package javafx{
    package javafx.scene{
        class Group
    }
    package javafx.geometry{
        class Point3D
        Point3D <-- Entity
        Point3D <-- HumanGroup
    }
}
package util{
    interface updateable{
        + update(double):void
    }
    class IdMaker{
        - {static} id:int
        + {static} nextId():String
    }
}
package visual #888888{
    abstract class Component{
        # id:String
        + getId():String
        # position:Point3D
    }
    Entity --> Component
    Component <|-up- Group
    class PlayerComponent{
        + PlayerComponent(String)
    }
    PlayerComponent <|-up- Component
    class MooseComponent{
    }
    MooseComponent <|-up- Component
    class RabbitComponent{

    }
    RabbitComponent <|-- Component
    class FoxComponent{
        
    }
    FoxComponent <|-- Component
}
@enduml