@startuml Classes 2
package entity{
    class Entity{
        + Entity(Point3D):Entity
        ==
        - id:String
        + getId():String
        --
        # position:Point3D
        + getPosition():Point3D
        --
        # collisionBox:CollisionBox
        + getCollisionBox():CollisionBox
        --
        # component:Component
        # {abstract} buildComponent():Component
        + getComponent():Component
        --
        # update(double):void
        # fall():void
        # correctCollisions():void
    }
    interface AttachableEntity{
        onAttach():void
        onDetach():void
    }
    
    interface LevelRestrictedAttachable{    
        getMinimumLevel():int
    }
    LevelRestrictedAttachable <|-- AttachableEntity
    

    package entity.living{

        abstract class LivingEntity{
            # hp:double
            # xpReward:double
            ==
            # move():void
            + getAttacked(double, LivingEntity):void
            # die():void
            # jump():void
            ==
            # setUp(boolean):void
            # setDown(boolean):void
            # setLeft(boolean):void
            # setRight(boolean):void
        }
        LivingEntity <|-- Entity
        interface UserControllable{
            + onMouseMoved(MouseEvent):void
            + onKeyPressed(KeyEvent):void
        }

        package entity.living.animal{
            abstract class Animal{
                + onDeath():void
            }
            Animal <|-left- LivingEntity
            'INTERFACES HERE
            interface FoodChainMember{
                'shouldScanForFood():boolean
                'scanForFoodAndStartEatingIfNecessary():void
            }
            interface Prey{
                # scanForIncomingPredators():Predator
                # startRunningFromPredator(Predator):void
            }
            Prey <|-- FoodChainMember
            interface Predator{
                + getLevelInFoodChain():int
                # targetAnimal(Animal):void
                # startAttackAnimal(Animal):void
                # scanForPrey():Prey
            }
            Predator <|-- FoodChainMember
            
            'HEBIVORE AND CARNIVORE
            abstract class Herbivore{
                
            }
            Herbivore <|-- Animal
            Herbivore <|-- Prey
            abstract class Carnivore
            Carnivore <|-- Animal
            Carnivore <|-- Predator

            'HERBIVORES HERE
            class Moose
            Moose <|-- Herbivore
            class Rabbit
            Rabbit <|-- Herbivore

            'CARNIVORES HERE
            class Fox
            Fox <|-- Carnivore
            Fox <|-- Prey
            class Wolf
            Wolf <|-- Carnivore
        }
        package entity.living.human{
            abstract class Human{
                - Level:int
                + getLevel():int
                + stats:Hashtable<String, double>
                + itemsStatModifiers:Hashtable<String, double>
                ==
                + tradeItem(Item, Human):Item
                ==
                - wornItems:ArrayList<Item>
                + getWornItems():ArrayList<Item>
            }
            Human <|-- LivingEntity
            class Player{
                
            }
            Player <|-- Human
            Player <|-- UserControllable
            class Npc{
                - publiclyShownItems:ArrayList<Item>
                + getFriendliness(Human):double
                + getPubliclyShownItems():ArrayList<Item>
                # choosePubliclyShownItems():ArrayList<Item>
            }
            Npc <|-- Human
        }
    }
    package entity.static{
        class StaticEntity{

        }
        StaticEntity <|-- Entity
        interface EatableStatic{
            + onGetEaten(LivingEntity):void
        }
        class TallGrass
        TallGrass <|-- StaticEntity
        TallGrass <|-- EatableStatic
        class FirTree{
            
        }
        FirTree <|-- StaticEntity
        class Pine{
            Pine(double):Pine
            buildComponent(double, String):Component
        }
        Pine <|-- StaticEntity
        class Tipi{
            buildComponent(double, String):Component
        }
        Tipi <|-- StaticEntity
    }
    package entity.item{
        class Inventory{
            - items:ArrayList<Item>
            + getItems():ArrayList<Item>
            --
        }
        interface Item{
            onAddToInventory(Human, ArrayList<Item>):void
            onRemoveFromInventory(Human, ArrayList<Item>):void
            
        }
        interface StackableItem{
            getCount():int
            add(int):void
        }
        interface ConsumableItem{
            + onConsume():Hashtable<String, double>
        }
        
        class Apple{
        }
        Apple <|-- Entity
        Apple <|-- StackableItem
        Apple <|-- ConsumableItem
        class Sword{

        }
        Sword <|-- Entity
        Sword <|-- Item
    }
    
}
package javafx{
    package javafx.scene{
        class Group
    }
}
package visual{
    package visual.component{
        class Component{
            - id:string
            + Component(String):Component
            + getId():String
        }
        Component <|-- Group
    }
    package visual.info{
        
    }
}
@enduml